- hosts: "localhost"
  connection: "local"
  gather_facts: false

  pre_tasks:
    - name: Validate Input
      assert:
        that:
        - aws_access_key is defined
        - aws_secret_key is defined
        - aws_region is defined
        - security_groups is defined
        - cidr_ip_type is defined

  tasks:
    - name: Check ansible version
      when: (ansible_version.major == 2 and ansible_version.minor < 8 ) or (ansible_version.major < 2)
      run_once: yes
      fail:
        msg: Please use Ansible 2.8 or newer

    - name: Delete all rules which allow access from everywhere (ipv4)
      when: cidr_ip_type == "ipv4"
      shell: >
        AWS_ACCESS_KEY_ID="{{aws_access_key}}" AWS_SECRET_ACCESS_KEY="{{ aws_secret_key }}"  aws ec2 revoke-security-group-ingress --group-name {{item.GroupName}} --ip-permissions FromPort={{item.FromPort}},ToPort={{item.ToPort}},IpProtocol={{item.IpProtocol}},IpRanges=[{CidrIp={{item.IpRanges[0].CidrIp}}}] --region "{{aws_region}}"
      with_items:
        - "{{security_groups}}"
      register: remove_public_access_ipv4
      failed_when: remove_public_access_ipv4.failed
    - debug: var=remove_public_access_ipv4

    - name: Delete all rules which allow access from everywhere (ipv6)
      when: cidr_ip_type == "ipv6"
      shell: >
        AWS_ACCESS_KEY_ID="{{aws_access_key}}" AWS_SECRET_ACCESS_KEY="{{ aws_secret_key }}"  aws ec2 revoke-security-group-ingress --group-name {{item.GroupName}} --ip-permissions FromPort={{item.FromPort}},ToPort={{item.ToPort}},IpProtocol={{item.IpProtocol}},Ipv6Ranges=[{CidrIpv6={{item.IpRanges[0].CidrIp}}}] --region "{{aws_region}}"
      with_items:
        - "{{security_groups}}"
      register: remove_public_access_ipv6
      failed_when: remove_public_access_ipv6.failed
    - debug: var=remove_public_access_ipv6

- hosts: "localhost"
  connection: "local"
  gather_facts: false

  pre_tasks:
    - name: Validate Input
      assert:
        that:
        - aws_access_key is defined
        - aws_secret_key is defined
        - aws_region is defined
        - security_groups is defined

  tasks:
    - name: Check ansible version
      when: (ansible_version.major == 2 and ansible_version.minor < 8 ) or (ansible_version.major < 2)
      run_once: yes
      fail:
        msg: Please use Ansible 2.8 or newer

    - name: No Security Groups without ingress filtering being used
      ec2_group:
        name: "{{item.group_name}}"
        description: "{{item.group_description}}"
        vpc_id: "{{item.vpc_id}}"
        region: "{{aws_region}}"
        aws_secret_key: "{{aws_secret_key}}"
        aws_access_key: "{{aws_access_key}}"
        rules:
          - proto: tcp
            from_port: "{{item.from_port}}"
            to_port: "{{item.to_port}}"
            cidr_ip: "{{item.cidr_range}}"
        rules_egress:
          - proto: tcp
            from_port: "{{item.from_port}}"
            to_port: "{{item.to_port}}"
            cidr_ip: "{{item.cidr_range}}"
        purge_rules: no
        purge_rules_egress: no
      with_items:
        - "{{security_groups}}"
      register: sg_ingress_logfile_validation

    - name: Delete all rules which allow access from everywhere
      shell: >
        AWS_ACCESS_KEY_ID="{{aws_access_key}}" AWS_SECRET_ACCESS_KEY="{{ aws_secret_key }}"  aws ec2 revoke-security-group-ingress --group-name "{{item.group_name}}" --ip-permissions '[{"IpProtocol": "-1", "IpRanges": [{"CidrIp": "0.0.0.0/0"}]}]' --region "{{aws_region}}"
      with_items:
        - "{{security_groups}}"
      register: remove_public_access
      failed_when: remove_public_access.failed
    - debug: var=remove_public_access

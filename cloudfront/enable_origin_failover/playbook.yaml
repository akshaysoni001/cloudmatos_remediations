---
- hosts: "localhost"
  connection: "local"
  gather_facts: false

  vars:
    origin_group_configuration: "./files/origin_group_configuration.json"

  pre_tasks:
    - name: Validate Input
      assert:
        that:
        - aws_access_key is defined
        - aws_secret_key is defined
        - aws_region is defined
        - distribution_id is defined
        - primary_origin_id is defined
        - secondary_origin_id is defined
        - origin_group_configuration is defined

  tasks:
    - name: Check ansible version
      when: (ansible_version.major == 2 and ansible_version.minor < 8 ) or (ansible_version.major < 2)
      run_once: yes
      fail:
        msg: Please use Ansible 2.8 or newer

    - name: Create Origin Group Configuration Policy
      template:
        src: ./origin_failover_configuration.j2
        dest: "{{origin_group_configuration}}"

    - name: Fetch CloudFront distributions Configuration
      shell: >
        AWS_ACCESS_KEY_ID="{{aws_access_key}}" AWS_SECRET_ACCESS_KEY="{{ aws_secret_key }}" aws cloudfront get-distribution-config --id {{distribution_id}} --query 'DistributionConfig' --region {{ aws_region }} --output json
      register: cf_configuration
      failed_when: cf_configuration.failed
    - debug: var=cf_configuration.stdout

    - name: Read file directly into fact
      ansible.builtin.set_fact:
        jsondata: "{{ cf_configuration.stdout }}"
    - debug: var=jsondata

    - name: Set a fact
      ansible.builtin.set_fact:
        OriginGroupjsondata:
          Items:
              - "{{ lookup('file', origin_group_configuration) }}"
          Quantity: 2
      register: OriginGroupKeyCreations
    - debug: var=OriginGroupKeyCreations

    - name: Update the fact
      ansible.utils.update_fact:
        updates:
          - path: jsondata.OriginGroups
            value: "{{OriginGroupjsondata}}"
      register: updated_configuration
    - debug: var=updated_configuration

    - copy: content="{{ updated_configuration.jsondata | to_nice_json }}" dest="files/update_configuration.json"
#
    - name: Get Etag For CloudFront Distribution
      shell: >
        AWS_ACCESS_KEY_ID="{{aws_access_key}}" AWS_SECRET_ACCESS_KEY="{{ aws_secret_key }}" aws cloudfront get-distribution-config --id {{distribution_id}} --query 'ETag' --region "{{aws_region}}"
      register: ETag
    - debug: var=ETag

    - name: Update/Enable Cloudfront distribution config
      shell: >
        AWS_ACCESS_KEY_ID="{{aws_access_key}}" AWS_SECRET_ACCESS_KEY="{{ aws_secret_key }}" aws cloudfront update-distribution --id {{distribution_id}} --distribution-config file://files/update_configuration.json --if-match {{ETag.stdout}} --region "{{aws_region}}"
      register: update_distribution
      failed_when: update_distribution.failed
    - debug: var=update_distribution.stdout
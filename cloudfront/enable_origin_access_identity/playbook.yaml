---
- hosts: "localhost"
  connection: "local"
  gather_facts: false

  pre_tasks:
    - name: Validate Input
      assert:
        that:
        - aws_access_key is defined
        - aws_secret_key is defined
        - region is defined
        - distribution_id is defined

  tasks:
    - name: Check ansible version
      when: (ansible_version.major == 2 and ansible_version.minor < 8 ) or (ansible_version.major < 2)
      run_once: yes
      fail:
        msg: Please use Ansible 2.8 or newer

    - name: Fetch CloudFront distributions Configuration
      shell: >
        AWS_ACCESS_KEY_ID="{{aws_access_key}}" AWS_SECRET_ACCESS_KEY="{{ aws_secret_key }}" aws cloudfront get-distribution-config --id {{distribution_id}} --query 'DistributionConfig' --region {{ region }} --output json
      register: cf_configuration
      failed_when: cf_configuration.failed
    - debug: var=cf_configuration.stdout

    - name: create an origin access identity
      community.aws.cloudfront_origin_access_identity:
        state: present
        caller_reference: S3OriginAccessIdentity
        comment: Enable S3 Origin Identity
      register: s3_origin

    - name: Read file directly into fact
      ansible.builtin.set_fact:
        jsondata: "{{ cf_configuration.stdout }}"
    - debug: var=jsondata

    - name: Update the fact
      ansible.utils.update_fact:
        updates:
          - path: jsondata.Origins.Items[0].S3OriginConfig.OriginAccessIdentity
            value: "origin-access-identity/cloudfront/{{s3_origin.cloud_front_origin_access_identity.id}}"
      register: updated_configuration
    - debug: var=updated_configuration

    - copy: content="{{ updated_configuration.jsondata | to_nice_json }}" dest="files/update_configuration.json"

    - name: Get Etag For CloudFront Distribution
      shell: >
        AWS_ACCESS_KEY_ID="{{aws_access_key}}" AWS_SECRET_ACCESS_KEY="{{ aws_secret_key }}" aws cloudfront get-distribution-config --id {{distribution_id}} --query 'ETag'
      register: ETag
    - debug: var=ETag

    - name: Update/Enable Cloudfront distribution config
      shell: >
        AWS_ACCESS_KEY_ID="{{aws_access_key}}" AWS_SECRET_ACCESS_KEY="{{ aws_secret_key }}" aws cloudfront update-distribution --id {{distribution_id}} --distribution-config file://files/update_configuration.json --if-match {{ETag.stdout}}
      register: update_distribution
      failed_when: update_distribution.failed
    - debug: var=update_distribution.stdout